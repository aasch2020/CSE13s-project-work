Trees
	A tree is a DAG of nodes
	tree is nul or a node with two trees
	EXACTLY ONE PATH BETWEEN NODES
	What a node
		Smalles entity in tree
		contains some val
		Bin tre eac node has 2 children
		some dont track parent
		k-ary tree, each node has up to k children a 2ary tree is a binary tree
root the starting pt of tree if null then tree is empty
parent node to subnode
child of ndoe kid
subtree
	tree in tre
leaf
	no kids
traversal
	4 diferent ways go rhtough the tree
		go all edges
	Preorder
		Step 1 print key if root
		Then print left
		Then right
		From root all the way left, then right
	inorder
		Go left
		Print self
		Go right
		GOES IN ORDER
		BASICALLY SORTS IT
	postorder
		GO left
		Go right
		Print
		print from leafs in
	level order
		Same as BFS
		uses a queue
Successor
	The next node according to some above order
	Predecessor, previous nodes in some order
	Both are well defined 
Preorder
	IF a root
	Pret the key
	Then iter left
	THen iter right
	Not recursive, do it with stack
In order
	Go left 
	print
	Go right
	Gives it to you in sorted order
Preorder
	Visit down to leftmost
	print all leaf then parent
		Go from left to right
LEvel order
	Visit a node and put it in queue, put both kids to queue
	Visit the thing put kids in queue and so on
	Until all things in queue
	Then go through queue
Binary search tree
	Keys less than a node is in it's left subtreee
	Keys greater than go in right subtree
Making a binary search tree
	make a tree
	find minimum
		Start from the root
		Walk all the way to the left
		leftmost leaf
	Find max
		Walk all the way to the right
	time cmpl
		Depends on the balance
		Balanced tree, height of the left subtree diff by at most 1 from height of right
		From a balancder tree Olog(n)
		For imbalanved tree O(n)
		Imbalanced tree can be a linked lest
	Find height
		How tall?
		If there is a node, then its at least 1 high,
			Then add to it the height of its two tallest children
	Is balanced
		Is height of left chiled - hiehgt of right more than one?
			if not balances
		If left and right are balanced then balanced
		Both conditions need to be met
	Finding a key
		If the key is less than current
			Then go to the left
		If key is greater than current
			Then go to the right
		If neigheter, we found it so return the root
Insterting a new key
	Current node is null
	Current node's key greater than key
	Current node's key less key
	Case 1 create new node as the root
	Case 2 recursively insert tree in left subtree
	Case 3 revursively insert key in right subtree

If sorted it makes a linked list yuck
If random things are used to make a tree, it is on average a balanced tree
Removing a key
	Follow DFS find the node containing the key
	Three cases
		Node to remoive no left child
			Make a copy of the right child
			Delete the node, replace it with right child
		Node to remove no right child
			Make a temp copy of left
			Delete the node replace it with left
		Node to remove 2 kids
			Make a temporary node of the smllest child on the right
			AKA the leftmost right child
			Walkdown the left from the right child
			This is the successor
			Copy the successors value
			remove the successor and replace
		Node no kids
			Up and delete the node lmao who care
Scripting
	Scripting lets the lazy be productive
	Operates on higher level objects like files and processes
	Software tools philsophy
		Connect the output of one program to the input of another
		This is program cmp like (F of g of h(x) from math
	Smart programmers reuse code prgrms and component
		Why rewrite when it already exists
		stuff like awk
from sh from zsh
	sh was og unix shell, bourne shell after stehpen bourne
	many diff shells lik csh tcsh bash 
		called a shell because it wraps around unix/linux
	you can make a shell
BASH
	bourne again sehll
	replace ment to bounre
	ommand line interpeter
	interpreted language
	allows users to either give commands to OS or batches as a script
Terminal is not smart, terminal is just a UI
	you can do no shel
	terminal is just an interface
Bash reads an input line by line
	each line is an entire comand
	split by whitespace
	the first word on a line is the command to execute with the following words the args for the cmmaon
	ex ls-a
	ls is to list file
	-a is to list all
types of commands
	Aliases only in interactive shells
		ll is eactually a acro for ls - lh
		each shell does aliases a bit diff
	builtins
		Bash provided commands like printf or echo or cd
		cant be a funct
	Functions
		A sequence of commands that perfoms some task
		takes args
	executables
		executable programs are specified and executed by file path
		Or by respective names if you are in the path as the program
	$PATH
		list of directories where shell will look for programs to run
		directories in path
			bin: this is where base stuff is stored
			usr/bin primary directory of executables
		the current dir should not be invluded in your PATH for seurity
			this is why program in current dir is just ./
Write a script
	#!/bin/bash
	#! is the magic number for script
	then interpret the script using bin/bash
basic doftiles
	there are two for bash
	.bashrc
	and .bash_profile
	.bashrc is a script that is runu whenever bash is started interactively
	.basj_pprofile is onyl executed at start of login aka when you login or open terminal
PArams and vars
	used to store data
	a king of parameter
	assign with =
	can be strings ints or arrays
	arrays need not be homogenous in bash
Expansion
	can expand parameters using the expansion operator $
	kind of like dereferencing in c.
	Variable expressing substitutes the variable wwit its value
	
Arithmetic
	Enclosed in double parens
	Resultof an expression can be expanded with $((expr))
	They work insde the doubule parsn
special params
	bvariables are named params special params are non var params
	&n- gives the nth argument passed tot he current script or function
		Use curly braces if n has more than one digit
	$# The number of positional parameters
	$$ is the PID of current shell
	$_ the last argument of the last executed command
	$? exit status of last exec command

Functions
	sequences of commands
	can have multipl;e functions in one script
	cand o if statements
	prevents oissue of overwritng vars
Arrays
	Array=(no comman list of things)
	You can use explicit indecies, this is array with gaps between indices there are sparse arrays
	can get spcific indices get num of indices can do += to append two arrays
	can expant the n-th index
	can expand an array as a single string
Globs and patterns
	Globs
		patterns used to match string
		*- matches andy string including the null empty string
			$ ls *.c matches anthing that ends with .c
		? matches single char		
		[chars] matches any character in chars
		[a-z] and thing between a and z
	Echo names of text files, JPEGS, PDFS
		echo *.{txt,jpeg,pdf}
Testing and conditional
	&& 
	||
	!
	equality is testing uing single equal
	need double square bracket to logical statement
	there are also if elif and else blocks
		conditional blocks must end with fi
	Tests are done with [[]]
		can also ude [] but its old and less feature
			use it if maybe in env without bash
tests on integers
	Need to interpret values of ints, there are -lt -le -eq -ne -ge -gt
	Can also test ints in arithmetic contexts
	between ((...))
Loops
	while loop condition is true
	until loop, until loop condition is true
	do and done instead of braces
	for win word, loop for each word of words setting w as each word
	for ((init; condl incr))
		Loop starting at init 
File redirection
	stdin is standarad out
	stdout is standard out
	stderr is standarad error
	these files desc can be redirected from or to files
	use > to redirect files/output to other fiels/output
Pipes
	Connects the stdout of one process to stdin of another process
	Pipis are denoted with the operator "|"
	Pipis can be chained together creating a piplein
	prgrms can be written such that they can be chained togehter to get interesting results
		The whole philosophy behind software tools taht drive unix
	Example pipeline list the IDs of user's porcesses limit to 10
	ps aux grep $USER awk { '{print $2}' | head
		what's awk?
			text parser
			splits file input into fields automatically
			output can be processed further with other tools like sort

Security and cryptography
	plaintext->key ciphertext->key->plaintext
	Does not change the data, render msg incoprehensible to all except intended recipient
	REQ
		Use a well known algo,
		If you rely on a secret algo (German Enigma, Japanese Purple)
		This meansthe key should be secret but algo be public
		If you make a secret algo, the second someone finds one your algo is cracked
	Algorithms are publicly known
		Keys represent a shared secret
		Everyone can know the ciphertext
		Only people wtih keys know the plaintext

Caesar Cipher
	Replaces each letter with the letter three positions down, thus uses modular arithmetic
	How to do in c?
		String comes in, k is the int num of shift
		Make a copy of the string, run thru the entire string, if alphabet and lower case, subtract a, add the k modulo 26 
		else is upper case, the place - A = k

Unbreakable codes?
	There is such a thing,a one time pad
		Uses a treuly random key as long as the message
		XOR the message with the key a bit at a time
	Code is unbreakable because key could be any str of bits
	The message could be any msg given the appropriate key
	Difficulty
		Distributin gth key is as hard as distributing the message
	Difficulty
		generating truly random bits is near impossibile
Modern encryption algos
	DES data encryption standard
		Uses 56 bit keys
		Same key to encrypt and decrypts
		Need to try on average 2^55 key per sec
			But, special comupter can try millions of keys per second
	Current algorithms AES use at least 128 bit keys
		Adding one bits to the key makes it 2* as hard do guess
		must try 2^127 keys
		At 10^15 keys per secondm wed need 1000 billion to break the key
		Usually modern encryption isn't brute forced
ATtacking AES
	Even if we have an ifnitely fast computer
	There is a fundamental limit on the energy req to flip a bit
	k = 1.38*10^-21
	energy is E > k T ln 2 Joules
	128 bit AES would need all the electric power of the USE for over a year
	
Simon
	NSAE block ciphers
	Simon is a balanced Feistel cipher with n bit word and lock lenth is 2n
	As of 2018, no successful attack on full-round of a variant of simon is known
	Does bit shift and and and xor to do this
	key schedule, takes a key and breaks the key out into various things
	Decrypted and go back wards fro the the thing
		Enc and dec the same
Symetric key cryptography is secret key cryptography
	this is that same key, known by send and receive and noone else
Public key
	instead of shared secret keys, we have public key K, and private key Kr that are not the same
	These keys are inverst of one another
	Encrypt and decrypt are the same algo, so typically, the same either way
	Public key cryptography is usually slow
	usually for small amounts of data

Diffie-Hellman key exchange
	For exchanging keys over insecure channels
	Two individuals agree ona public prime and some int g, such that g is a primitive roor mod p
	Alice chooses private int a and computes A= g^a(modp)
	Bob chooese pricate integer b and computer B= g^b(mod p)
	They share A and B over insecure channel
	Alice computes K = B^a(modp)=g^ab(modp)
	Bob computes K = A^b(modp)= g^ba(modp)
	ab=ba
	Now k is the shared key
	Lots of theoriticians
	Authentication of Diffie hellman




RSA
	Mutual inverses of pub and priv key
	THis means dec and enc the same if you go opposite ways	
ATtacking RSA
	Requires factoring n in order to find totient
	Factoring of large coposites if very hard
	Best knowsn algo is the generalized number fiels sieve, 

PUblic key is comprised of two integeres of public omdulus and public exponenet
	Choose tow large primes p and q let n = p * q
	Compute the totient
	Choose a random e such taht gcd
	Private key is comprised of two integers n and d
	d such that e*d = 1 mod(totient)
	d by iteself is the private key, but n is req for decrypt so put them together
keygen
	code shown
	

Primality testing
	How do know if number is prime?
	We could try to factor it, that is root(n) 
	Sieve of Eosthosenes, need O(n) space
	probablistic test(can be wrong)
	Fooled by Carmichael pesudoprime
		it fools probablisitc test
	We can use the AKS test
		Too slow to be practical
		The firset primality test in polynomial time
	

Witness lop of probablistic primality test

Fibonacci in GMP
GMP examples
in the slides


How to attack modern cryptography?
	The end user usually the issue
	RSA key extraction via low bandwidth Acoustic cryptanlysis
	You just cheat lol
	The weakest link is the end user
		
