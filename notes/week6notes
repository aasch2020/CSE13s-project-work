Into to files
	We wanna store biggie data
		def of large has changed by 6 orders of magnitude over the years
		DRAM doesnt survive turning the computer off
		Files are accessed using names, memory is accessed using addresses
		Liquid nitrogen preserves dram
	File names are preserved, stored by addresses
	Your computer has a millions of files
	how ot uniquely specify
	FIle has basename, dot and extension
	In some OS the extension is a separate entity
	in UNIX the extension is only used by convention
	.o is an object file is binary normally
	Some prorgams expect the tpe of file
	File structure
		Unix files are a seq of bytes
		Older files are sequence of records
	Files may have internal structure
		exe header file then text then data then relocation bits and symbol table
		Archive file
			Header module name dat owner protection size
	File access
		Names and extensions
	Sequntial access
		Read all bytes/record from the beginning
		Cannot jump around may reqind or back up
		Convenient when medium was magnetic tape
	Random access
		bytes/record read in any order
		essential for database systems
		Read can be
			Move file marker ten read or read then move marker
Files have metadata data abt data
	Protection, who can access
	Password
	who made the file?
	Is it read only?
	Hidden flag
	System flag
	ASCCI or binary flag
	Random access flag
	temp flag
File ops
	Create delete open close read write
	append seek getattr setatttr rename
	
directories
	Names not number
	We use hierarchy to manage complexity
	Files systems allow this to be done with directories
	Grouping makes it easier to find file, remember where, locate related files determine which files are related
hierarchicahl file system
	root directory
		each user has a dir
			can make mor dirs in the dir
Directory options
	create delete
	oen close
	readdir rename
	link unlink
Big hierarchicahl file system
	bigge files
can linke directories
Two directories can share a file same file
	Dont do this a lot
	same with soft links

UINX V7 Fiel system
	I-node number
	File name
The table has i node, has pointers to table of i node
	Each i node is a file
	The first few addresses in the i node are the adreses of the block on disk
	If I wanted t do all direct pointer wed have hecka data
	each of them points to a thing
	any problem of cs can be solved with inderections
	I node put the thing in the file system
	File descriptor
	Put files in entry number zero
	file descriptor is actually an int
File system implementation
	You got a disk
	the disk is an array fo block
	each block is called a sector
	partition 
	MBR master boot record
	the computer only boots from bios and know enough to read master boot record
	the MBR then reads more parts of the file system
		boot block boots file system
		Super block starts file system
		free spapce mgmt
			Checks whats free or not
		I-nodes is 
		root directory is huge
		Files and directory
		fixed size
		bootloader is the first thing that gets run
cat.c
	Copies standard in to standard out
	Sequentially copies multiple files to stdout
	discuss in detail later
Linked lists
	traverse better adn less memeory but hard to access one specific
	single link
		Each ndoe has  apointer ot the next
	Doubly linked
		Each node has pointer to next and prev
		Cost is more memory
		Harder to add to 
	Sentinedl nodes
		Dummy nodes used to mark ends of a linked list
		Costs you a fake node
		insertion will always work the same as the added elements will always point to head and tail
	ciruculat double linked list with sentinel nodes
		head and tai link together
	Singly linked list
		Has a key and a pointer to next node
		To make one, pass ina key, malloc node, mak enext point null
		Delete node, same as makeing it
	ll_delete
		delete the entirlist
	lookup a thing
		Go from head to tail, and see if the key you want is the key you at
		return the node, if not found null
	how to insert into linked list
		First lookup if theres already something with a key
	I		if it is dont do aything
		If not, stick the thing at the front, aka with a link to head and a link to next
	print linked list
		beginning to end print the keys
	removing a thing from  a linked list
		First check if the head exists
		point current at head a previous at nothing
		While you havent reached the end of the list
			If you find thei thing to remove
				Make the next of prev next of current 
			If theres not anything, aka we at teh start, make the head point to the next
			delete the current one
			make the prevoius equal current and the next of current equal current
Move to front rule
	What is most likely to happen?
	If you're looking something and likely to look for it again
	its more efficient to look for front of list than at the ends
	The more something gets looked up move it up
	Ok so what is the move to front rule
		amortized analysis?
		basically, given that you just acessed something, you probably will be likeley to do it again
		if you find the thing, move it to the front of the list
		return the head
		make a list and go thru the steps do picutres
Linked list stacks
	Pushing in element is inserting it at the head, to pop is to follow pointer and put ponter at top and remove from head
LL queue
	Add at tail
	remove at head
	point the head thing and stuff
A doubly linked list ADT
	You have a node, key with a forward and bakward 
New struct called list head
	Points at head and tail
Make a new ndode, forward a nd rev point at nothing
Make a new list
	Allocate a list head and p;oint it at nothing
Prepend an element
	if you have both a head and node
	if head and tail are nil, both point at new thing
	If not, point the one behind it to it, and the one in front of it back to it
Apending
	point the tail and stuff around, draw pictures
Inserting
	insert a node lexicographically
	There is a pointer p at beginning
		While not at the end and we are at the key for p, just addd p key
	If p goes to end append
	if p no move prepend
	if not, put it na specifict spot, by moving the pointers of the before and after aroud
Inserting into a doubel linked list
em=ocing


Memory hierarchy
	smal and fast or large and slow
	Cache
		level 1 on the cPU chip
		L2 may be on or off chip
		L3 off cachse made of chip
	Main memoery is the dRAM
	Then is disk, many tera of slow cheap non volatile storage
	Memeory manager makes sure to check which memeory is what so it doesnt blow up or overwrite
OS timeline
	getn 1 vacuum tubes plug boards
	gen 2
		transistors batch systems
	third gen integreated circuit multiprogramming
	4th gen large secale integreation personal computer
	5th gen mobile devices
1st gen
2nd gen
	 bring cards to the machine, read cards into input tape
	put input tape on 67093
	perform computation writing results to output tape
	put output tapeo on 1401 wihic print out
Cards have a header and then code then data


3rd gen
	where all the os from timeshare
	MVS Freebsd linux
	win 100 mx os
	real time OS
	snart card OS
	Components of a simple PC
		processor memory cpu 
		The BUS connects everything and is the mobo
		video card
	Multicore CPU 
		Shared L@ cachse or separate L2 cache
		superscalar CPU
			multiple t hreads per core by superscaling
	processor look wocky
	a cpu have many cpus in it
	billion or more transistors
Storag e [yramid
	Registers as fast as cpu .4ns
	on chip cahe, 10x slower 4ns
	cache 10 ns		
        dram 50 ns
	main mem 560 ns
	flsah memory 100 mew s
	magnetic disk 5 ms
	magnetic tape 50 sec

